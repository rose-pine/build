import fs from "node:fs";
import process from "node:process";
import { type UserOptions } from "../config.js";

export const updateReadmeVersion = (version: string, flags?: UserOptions) => {
	const readmePath = process.cwd() + "/readme.md";
	if (!fs.existsSync(readmePath)) return;

	const readme = fs.readFileSync(readmePath, "utf8").toString();

	const t = flags?.template ? ` -t ${flags.template}` : "";
	const o = flags?.output ? ` -o ${flags.output}` : "";
	const p = flags?.prefix ? ` -p ${flags.prefix}` : "";
	const f = flags?.format ? ` -f ${flags.format}` : "";
	const s = flags?.stripSpaces ? " -s" : "";
	const usedFlags = `${t}${o}${p}${f}${s}`;

	const message = `<!-- #rose-pine-build -->

\`\`\`sh
npx @rose-pine/build@${version ?? "latest"}${usedFlags}
\`\`\`

_Generated by [@rose-pine/build@${version}](https://github.com/rose-pine/build)_

<!-- /rose-pine-build -->`;

	const searchFor =
		/(<!-- #rose-pine-build -->(.*?[\n\r\t])*?<!-- \/rose-pine-build -->)|(```.*?[\n\r\t].*?\n```\n\n_Generated by @rose-pine\/build.*?_)/gm;
	const replaceWith = message;
	const hasMatch = searchFor.test(readme);

	const readmeWithVersion = hasMatch
		? readme.replace(searchFor, replaceWith)
		: readme + `\n${replaceWith}`;

	fs.writeFileSync(readmePath, readmeWithVersion, "utf8");
};
